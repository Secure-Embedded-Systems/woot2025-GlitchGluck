
app.elf:     file format elf32-msp430

SYMBOL TABLE:
0000fffe l    d  __reset_vector	00000000 __reset_vector
0000f000 l    d  .rodata	00000000 .rodata
0000f004 l    d  .text	00000000 .text
00000200 l    d  .data	00000000 .data
00000200 l    d  .bss	00000000 .bss
00000214 l    d  .noinit	00000000 .noinit
00000000 l    d  .MP430.attributes	00000000 .MP430.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/zliu12/capri6/msp430-gcc-9.3.1.11_linux64/bin/../lib/gcc/msp430-elf/9.3.1/../../../../msp430-elf/lib/430/crt0.o
0000fffe l       __reset_vector	00000000 __msp430_resetvec_hook
00000000 l    df *ABS*	00000000 crt_bss.o
00000000 l    df *ABS*	00000000 crt_main.o
00000000 l    df *ABS*	00000000 crt_callexit.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib_a-strcpy.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 lib_a-memset.o
0000f0a4 g     F .text	00000010 strcpy
0000f01c g     F .text	00000004 __crt0_call_exit
0000f004 g     F .text	00000004 __crt0_start
0000f008 g     F .text	0000000e __crt0_init_bss
00000014 g       *ABS*	00000000 __bsssize
0000f020 g     F .text	00000002 handle_error
00000214 g       .noinit	00000000 end
0000f004 g       .text	00000000 _start
00000000  w      *ABS*	00000000 __rom_highdatacopysize
0000f0c8 g     F .text	00000014 memset
0000f04c g     F .text	0000005a main
00000000  w      *ABS*	00000000 __high_bsssize
00000000  w      *ABS*	00000000 __rom_highdatastart
0000f022 g     F .text	0000002a hello_world
00000000  w      *ABS*	00000000 __high_datastart
00000000  w      *ABS*	00000000 __upper_data_init
00000200 g       .bss	00000000 __bssstart
00001200 g       .noinit	00000000 __stack
00000200 g     O .bss	00000013 large_string
00000200 g       .data	00000000 _edata
0000f0c6  w    F .text	00000004 exit
00000000  w      *ABS*	00000000 __high_bssstart
0000f016 g     F .text	00000006 __crt0_call_main
0000f0c6  w    F .text	00000004 _exit
0000f0b4 g     F .text	00000012 strlen



Disassembly of section .text:

0000f004 <__crt0_start>:
    f004:	31 40 00 12 	mov	#4608,	r1	;#0x1200

0000f008 <__crt0_init_bss>:
    f008:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000f00c <.Loc.76.1>:
    f00c:	0d 43       	clr	r13		;

0000f00e <.Loc.77.1>:
    f00e:	3e 40 14 00 	mov	#20,	r14	;#0x0014

0000f012 <.Loc.81.1>:
    f012:	b0 12 c8 f0 	call	#-3896		;#0xf0c8

0000f016 <__crt0_call_main>:
    f016:	0c 43       	clr	r12		;

0000f018 <.Loc.254.1>:
    f018:	b0 12 4c f0 	call	#-4020		;#0xf04c

0000f01c <__crt0_call_exit>:
    f01c:	b0 12 c6 f0 	call	#-3898		;#0xf0c6

0000f020 <handle_error>:
        }                                             \


void handle_error(const char *file, int line) {
    //printf("ERROR\n");
    while (1) {}
    f020:	ff 3f       	jmp	$+0      	;abs 0xf020

0000f022 <hello_world>:
}


void hello_world(void) {
    memcpy((uint8_t *)0x200, "hello world!", 12);
    f022:	3c 40 00 02 	mov	#512,	r12	;#0x0200
    f026:	bc 40 68 65 	mov	#25960,	0(r12)	;#0x6568
    f02a:	00 00 
    f02c:	bc 40 6c 6c 	mov	#27756,	2(r12)	;#0x6c6c
    f030:	02 00 
    f032:	bc 40 6f 20 	mov	#8303,	4(r12)	;#0x206f
    f036:	04 00 
    f038:	bc 40 77 6f 	mov	#28535,	6(r12)	;#0x6f77
    f03c:	06 00 
    f03e:	bc 40 72 6c 	mov	#27762,	8(r12)	;#0x6c72
    f042:	08 00 
    f044:	bc 40 64 21 	mov	#8548,	10(r12)	;#0x2164, 0x000a
    f048:	0a 00 

0000f04a <.L4>:
    while(1);
    f04a:	ff 3f       	jmp	$+0      	;abs 0xf04a

0000f04c <main>:
}


char large_string[19];

int main() {
    f04c:	31 80 10 00 	sub	#16,	r1	;#0x0010

0000f050 <.LCFI0>:
    WDTCTL = WDTPW | WDTHOLD;
    f050:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    f054:	20 01 

0000f056 <.LVL1>:
    char buffer[16];
    int i;
    for( i = 0; i < 15; i++)
    f056:	3c 40 00 02 	mov	#512,	r12	;#0x0200
    f05a:	3d 40 0f 02 	mov	#527,	r13	;#0x020f

0000f05e <.L6>:
      large_string[i] = 'A';
    f05e:	fc 40 41 00 	mov.b	#65,	0(r12)	;#0x0041
    f062:	00 00 
    f064:	1c 53       	inc	r12		;

0000f066 <.Loc.31.1>:
    for( i = 0; i < 15; i++)
    f066:	0c 9d       	cmp	r13,	r12	;
    f068:	fa 23       	jnz	$-10     	;abs 0xf05e

0000f06a <.Loc.33.1>:
    large_string[15] = 'B';
    f06a:	3c 40 00 02 	mov	#512,	r12	;#0x0200

0000f06e <.LVL4>:
    f06e:	fc 40 42 00 	mov.b	#66,	15(r12)	;#0x0042, 0x000f
    f072:	0f 00 

0000f074 <.Loc.34.1>:
    large_string[16] = 0x22;
    f074:	fc 40 22 00 	mov.b	#34,	16(r12)	;#0x0022, 0x0010
    f078:	10 00 

0000f07a <.Loc.35.1>:
    large_string[17] = 0xf0;
    f07a:	fc 40 f0 ff 	mov.b	#-16,	17(r12)	;#0xfff0, 0x0011
    f07e:	11 00 

0000f080 <.Loc.36.1>:
    large_string[18] = '\0';
    f080:	cc 43 12 00 	mov.b	#0,	18(r12)	;r3 As==00, 0x0012

0000f084 <.Loc.37.1>:
    ASSERT(sizeof(buffer) > strlen(large_string));
    f084:	b0 12 b4 f0 	call	#-3916		;#0xf0b4

0000f088 <.LVL5>:
    f088:	7d 40 0f 00 	mov.b	#15,	r13	;#0x000f
    f08c:	0d 9c       	cmp	r12,	r13	;
    f08e:	09 28       	jnc	$+20     	;abs 0xf0a2

0000f090 <.Loc.37.1>:
    strcpy(buffer,large_string);
    f090:	3d 40 00 02 	mov	#512,	r13	;#0x0200
    f094:	0c 41       	mov	r1,	r12	;
    f096:	b0 12 a4 f0 	call	#-3932		;#0xf0a4

0000f09a <.LVL6>:
    //printf("Copied string: %s\n", buffer);
    return 0;
}
    f09a:	4c 43       	clr.b	r12		;
    f09c:	31 50 10 00 	add	#16,	r1	;#0x0010

0000f0a0 <.LCFI1>:
    f0a0:	30 41       	ret			

0000f0a2 <.L8>:
    while (1) {}
    f0a2:	ff 3f       	jmp	$+0      	;abs 0xf0a2

0000f0a4 <strcpy>:
    f0a4:	0e 4c       	mov	r12,	r14	;

0000f0a6 <.L2>:
    f0a6:	7f 4d       	mov.b	@r13+,	r15	;

0000f0a8 <.LVL3>:
    f0a8:	
0000f0aa <L0^A>:
    f0aa:	00 00       	beq			
    f0ac:	1e 53       	inc	r14		;

0000f0ae <.Loc.68.1>:
    f0ae:	0f 93       	cmp	#0,	r15	;r3 As==00
    f0b0:	fa 23       	jnz	$-10     	;abs 0xf0a6

0000f0b2 <.Loc.99.1>:
    f0b2:	30 41       	ret			

0000f0b4 <strlen>:
    f0b4:	0d 4c       	mov	r12,	r13	;

0000f0b6 <.L2>:
    f0b6:	0e 4d       	mov	r13,	r14	;

0000f0b8 <.LVL3>:
    f0b8:	1d 53       	inc	r13		;

0000f0ba <.LVL4>:
    f0ba:	ce 93 00 00 	cmp.b	#0,	0(r14)	;r3 As==00
    f0be:	fb 23       	jnz	$-8      	;abs 0xf0b6

0000f0c0 <.Loc.87.1>:
    f0c0:	0e 8c       	sub	r12,	r14	;

0000f0c2 <.LVL5>:
    f0c2:	0c 4e       	mov	r14,	r12	;

0000f0c4 <.LVL6>:
    f0c4:	30 41       	ret			

0000f0c6 <_exit>:
    f0c6:	ff 3f       	jmp	$+0      	;abs 0xf0c6

0000f0c8 <memset>:
    f0c8:	0e 5c       	add	r12,	r14	;

0000f0ca <L0^A>:
    f0ca:	0f 4c       	mov	r12,	r15	;

0000f0cc <.L2>:
    f0cc:	0f 9e       	cmp	r14,	r15	;
    f0ce:	01 20       	jnz	$+4      	;abs 0xf0d2

0000f0d0 <.Loc.104.1>:
    f0d0:	30 41       	ret			

0000f0d2 <.L3>:
    f0d2:	1f 53       	inc	r15		;

0000f0d4 <.LVL4>:
    f0d4:	cf 4d ff ff 	mov.b	r13,	-1(r15)	; 0xffff
    f0d8:	f9 3f       	jmp	$-12     	;abs 0xf0cc
